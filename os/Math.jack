// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer).
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i, powerOfTwo;
        let i = 0;
        let powerOfTwo = 1;
        let n = 16;
        let powersOfTwo = Array.new(n);
        while (i < n) {
            let powersOfTwo[i] = powerOfTwo;
            let powerOfTwo = powerOfTwo + powerOfTwo;
            let i = i + 1;
        }
        return;
    }

    function int bit(int i, int x) {
        if ((x & powersOfTwo[i]) = powersOfTwo[i]) {
            return 1;
        }
        else {
            return 0;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int i, sum, shiftedx;
        let i = 0;
        let sum = 0;
        let shiftedx = x;
        while (i<n){
            if (Math.bit(i,y)=1) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q, mul;
        var boolean is_neg_x, is_neg_y;

        if (x<0) {
            let is_neg_x=true;
            let x = -x;
        }
        else {
            let is_neg_x=false;
        }
        if (y<0) {
            let is_neg_y=true;
            let y = -y;
        }
        else {
            let is_neg_y=false;
        }

        if (x<y){
            return 0;
        }
        let q = Math.divide(x,y+y);
        // TODO: Optimize division. Avoid Multiplication
        let mul = q*y;
        let mul=mul+mul;
        if ((x-mul)<y) {
            if (is_neg_x=is_neg_y) {
                return q+q;
            }
            else {
                return -(q+q);
            }
        }
        else {
            if (is_neg_x=is_neg_y) {
                return q+q+1;
            }
            else {
                return -(q+q+1);
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, squaredVal;
        let y=0;
        let j=n/2-1;
        while (j>-1) {
            let squaredVal = (y+powersOfTwo[j])*(y+powersOfTwo[j]);
            if ((0<squaredVal)&(squaredVal-1<x)) {
                let y = y + powersOfTwo[j];
            }
            let j = j-1;
        }
    return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
    if (a>b) {
        return a;
    }
    else {
        return b;
    }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a<b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (0<x) {
            return x;
        }
        else {
            return -x;
        }
    }
}
