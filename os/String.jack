// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array charArray;
    field int maxLength, length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLen) {
        let length = 0;
        let maxLength = maxLen;
        if (maxLength>0) {
            let charArray = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do charArray.dispose();
        let length = 0;
        let maxLength = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int i ;
        let charArray[length] = c;
        let length = length+1;
        let i = 0;
        while (i<length) {
            // do Output.printChar(charArray[i]);
            let i = i+1;
        }
        // do Output.println();
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length-1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, val;
        var boolean isNegative;
        if (charAt(0) = 45) { // check for negative sign
            let isNegative = true;
            let i = 1; // start from next character
        } else {
            let isNegative = false;
            let i = 0; // start from first character
        }
        let val = 0;
        while (i<length) {
            let d = charAt(i)-48;
            let val = 10*val + d;
            let i = i+1;
        }

        if (isNegative) {
            let val = -val; // make it negative
        }
        return val;
    }

    // TODO
    // /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, j, d;
        var boolean isNegative;
        var Array reverseDigits;
        let isNegative = false;
        let reverseDigits = Array.new(6); // max 6 digits for int
        let length = 0;

        if (val=0) {
            let charArray[0] = 48; // add zero
            let length = 1;
            return;
        }

        if (val<0) {
            let isNegative = true;
            let val = -val; // make it positive
        }

        let i = 0;
        while (val>0) {
            let d = val - (10 * (val / 10));
            let reverseDigits[i] = d + 48; // convert to char
            let val = val / 10;
            let length = length + 1;
            let i = i + 1;
        }

        let j = 0;
        if (isNegative) {
            let charArray[0] = 45; // add minus sign
            while (j<length) {
                let charArray[j+1] = reverseDigits[length-j-1]; // reverse the order
                let j = j + 1;
            }
            let length = length + 1;
        } else {
            while (j<length) {
                let charArray[j] = reverseDigits[length-j-1]; // reverse the order
                let j = j + 1;
            }
        }

        let maxLength = Math.max(maxLength, length);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
