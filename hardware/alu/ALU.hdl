// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // process zx
    Mux16(a=x , b= false, sel=zx , out=x1 );

    // process nx
    Not16(in=x1 , out=notx1 );
    Mux16(a=x1 , b= notx1, sel=nx , out=x2);

    // process zy
    Mux16(a=y , b= false, sel=zy , out=y1 );

    // process ny
    Not16(in=y1 , out=noty1 );
    Mux16(a=y1 , b= noty1, sel=ny , out=y2);

    // process f
    And16(a= x2, b=y2 , out= xandy);
    Add16(a =x2 , b =y2 , out =xplusy);
    Mux16(a=xandy , b=xplusy , sel= f, out=outBeforeNo );

    // process no
    Not16(in= outBeforeNo, out= notOut);
    Mux16(a= outBeforeNo, b=notOut , sel=no , out[0..7]= out1,out[8..15]= out2);
    Add16(a[0..7] =out1, b[8..15] = out2, out =out );

    // calculate zr
    Or8Way(in= out1, out= notzr1);
    Or8Way(in= out2, out= notzr2);
    Or(a=notzr1 , b=notzr2 , out=notzr);
    Not(in=notzr , out= zr);

    // calculate ng
    // ng8bit : if (out < 0) equals 10000000, else 00000000
    And16(a[0..7] =out1,a[8..15] =out2 , b[15]=true , out[8..15]=ng8bit );
    Or8Way(in=ng8bit , out= ng);



}