// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[12..14],
     a=loadRAM0, b=loadRAM1, c=loadRAM2, d=loadRAM3,
     e=loadSCR0, f=loadSCR1,
     g= loadKBD);
    Or8Way(in[0]=loadRAM0,in[1]=loadRAM1,in[2]=loadRAM2,in[3]=loadRAM3, out= loadRAM);
    RAM16K(in=in, load=loadRAM , address=address[0..13], out=outRAM);
    RAM4K(in=in, load=loadSCR0, address=address[0..11], out=outSCR0);
    RAM4K(in=in, load=loadSCR1, address=address[0..11], out=outSCR1);
    Register(in=in, load=loadKBD, out=outKBD);
    Mux8Way16(a=outRAM, b=outRAM, c=outRAM, d=outRAM,
     e=outSCR0, f=outSCR1,
     g= outKBD, sel=address[12..14] , out=out );
}